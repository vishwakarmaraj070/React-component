// Tables
$table-th-font-size: 0.9rem !default;
$table-td-font-size: $table-th-font-size !default;
$table-th-padding-top: 1.1rem !default;
$table-td-padding: 1rem !default;
$table-td-padding-x: 0.5rem !default;
$table-a-color: #212529 !default;
$table-hover-transition: 0.5s !default;
$table-hover-background-color: rgba(0, 0, 0, 0.075) !default;
$table-sm-padding-y: 0.3rem !default;
$table-inverse-color-border: #fff !default;
$product-table-img-max-height: 150px !default;
$product-table-img-min-width: 50px !default;
$table-th-lg-min-width: 9rem !default;
$table-th-sm-min-width: 6rem !default;
$table-scroll-vertical-max-height: 300px !default;
$table-label-height: 0.94rem !default;
$table-label-line-height: $table-label-height !default;
$table-striped-order: odd !default;
$table-accent-bg: $pale-grey-two !default;
$table-border-width: 1px !default;
$table-border-color: $light-periwinkle !default;

@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if(
    $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}
.r-table {
  table {
    border-collapse: collapse;
    width: auto;
    box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.075);
    th {
      font-size: $table-th-font-size;
      font-weight: 500;
      text-transform: capitalize;
      text-align: left;
      white-space: nowrap;
    }
    td {
      font-size: $table-td-font-size;
      font-weight: 300;
      white-space: nowrap;
    }
    .r-input-box {
      margin-bottom: 0;
    }
    &.table {
      thead th {
        border-top: none; 
      } 
      th,
      td {
        padding-left: $table-td-padding-x;
        padding-right: $table-td-padding-x;
        padding-top: $table-td-padding;
        padding-bottom: $table-td-padding;
      }
      a {
        margin: 0;
        color: $table-a-color;
        // &.btn {
        //   color: inherit;
        // }
      }
      .label-table {
        height: $table-label-line-height;
        padding: 0;
        margin: 0;
        line-height: $table-label-height;
      }
      &.btn-table {
        td {
          vertical-align: middle;
        }
      }
    }
    &.table-hover {
      tbody {
        tr {
          &:hover {
            background-color: $table-hover-background-color !important;
            transition: $table-hover-transition;
          }
        }
      }
    }
    .th-lg {
      min-width: $table-th-lg-min-width;
    }
    .th-sm {
      min-width: $table-th-sm-min-width;
    }
    &.table-sm {
      th,
      td {
        padding-top: $table-sm-padding-y;
        padding-bottom: $table-sm-padding-y;
      }
    }
    // stripe
    &.table-striped {
      tbody tr:nth-of-type(#{$table-striped-order}) {
        background-color: $table-accent-bg;
      }
    }

    &.table-bordered {
      border: $table-border-width solid $table-border-color;

      th,
      td {
        border: $table-border-width solid $table-border-color;
      }

      thead {
        th,
        td {
          border-bottom-width: 2 * $table-border-width;
        }
      }
    }

    // border less
    &.table-borderless {
      th,
      td,
      thead th,
      tbody + tbody {
        border: 0;
      }
    }
  }
  &.table-wrapper {
    &.table-scroll-y {
      display: block;
      overflow-y: auto;
      overflow-x: hidden;
    }

    &.table-scroll-x {
      display: block;
      overflow-x: auto;
      overflow-y: hidden;
    }
  }

  &.table-fixed {
    table-layout: fixed;
  }

  // footer fix on min height

  &.table-responsive,
  &.table-responsive-sm,
  &.table-responsive-md,
  &.table-responsive-lg,
  &.table-responsive-xl {
    > .table-bordered {
      border-top: 1px solid #dee2e6;
    }
  }

  &.table-responsive {
    @each $breakpoint in map-keys($grid-breakpoints) {
      $next: breakpoint-next($breakpoint, $grid-breakpoints);
      $infix: breakpoint-infix($next, $grid-breakpoints);

      &#{true} {
        @include media-breakpoint-down($breakpoint) {
          display: block;
          width: 100%;
          overflow-x: auto;
          -webkit-overflow-scrolling: touch;

          // Prevent double border on horizontal scroll due to use of `display: block;`
          > .table-bordered {
            border: 0;
          }
        }
      }
    }
  }
}
